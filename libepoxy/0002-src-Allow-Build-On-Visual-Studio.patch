From f8d8a07068e989a706348e923849f591ace32bac Mon Sep 17 00:00:00 2001
From: Chun-wei Fan <fanchunwei@src.gnome.org>
Date: Fri, 5 Jun 2015 14:03:51 +0800
Subject: [PATCH 2/5] src/: Allow Build On Visual Studio

Allow the non-generated sources and headers to build on Visual Studio by:
-Defining a macro that is used to define the suitable constructor according
 to the compiler used, and use that macro when using constructors.
 The current state of the code is a GCCism using
 __attribute__((constructor)).

-Ensure that we use GLAPIENTRY and EPOXY_CALLSPEC after the return type,
 as Visual Studio does not like __stdcall before the return type, which is
 what GLAPIENTRY and EPOXY_CALLSPEC expands to on Windows.

-Ensure we have import/export annotations for functions prototypes and
 variables, since Visual Studio expects such annotations for function
 prototypes if they exist.  We are using EPOXY_IMPORTEXPORT for variables
 as we might try to reference variables, which must be imported by
 __declspec(dllimport) when used.

-Avoid using empty structs and arrays, as it is a C99 feature that is not
 supported (nor will it probably be at any point) on Visual Studio.
---
 src/dispatch_common.c | 29 +++++++++++++++---
 src/dispatch_common.h | 82 +++++++++++++++++++++++++--------------------------
 src/dispatch_wgl.c    |  8 ++---
 3 files changed, 70 insertions(+), 49 deletions(-)

diff --git a/src/dispatch_common.c b/src/dispatch_common.c
index 4e34d6e..7dd0a49 100644
--- a/src/dispatch_common.c
+++ b/src/dispatch_common.c
@@ -120,6 +120,26 @@
 #define GLES2_LIB "libGLESv2.so.2"
 #endif
 
+#ifdef __GNUC__
+#define CONSTRUCT(_func) static void _func (void) __attribute__((constructor));
+#define DESTRUCT(_func) static void _func (void) __attribute__((destructor));
+#elif defined (_MSC_VER) && (_MSC_VER >= 1500)
+#define CONSTRUCT(_func) \
+  static void _func(void); \
+  static int _func ## _wrapper(void) { _func(); return 0; } \
+  __pragma(section(".CRT$XCU",read)) \
+  __declspec(allocate(".CRT$XCU")) static int (* _array ## _func)(void) = _func ## _wrapper;
+
+#define DESTRUCT(_func) \
+  static void _func(void); \
+  static int _func ## _constructor(void) { atexit (_func); return 0; } \
+  __pragma(section(".CRT$XCU",read)) \
+  __declspec(allocate(".CRT$XCU")) static int (* _array ## _func)(void) = _func ## _constructor;
+
+#else
+#error "You will need constructor support for your compiler"
+#endif
+
 struct api {
 #ifndef _WIN32
     /**
@@ -165,6 +185,8 @@ struct api {
 static struct api api = {
 #ifndef _WIN32
     .mutex = PTHREAD_MUTEX_INITIALIZER,
+#else
+	0,
 #endif
 };
 
@@ -175,8 +197,7 @@ static EGLenum
 epoxy_egl_get_current_gl_context_api(void);
 #endif
 
-static void
-library_init(void) __attribute__((constructor));
+CONSTRUCT (library_init)
 
 static void
 library_init(void)
@@ -653,7 +674,7 @@ epoxy_print_failure_reasons(const char *name,
     }
 }
 
-WRAPPER_VISIBILITY void
+WRAPPER_VISIBILITY (void)
 WRAPPER(epoxy_glBegin)(GLenum primtype)
 {
 #ifdef _WIN32
@@ -667,7 +688,7 @@ WRAPPER(epoxy_glBegin)(GLenum primtype)
     epoxy_glBegin_unwrapped(primtype);
 }
 
-WRAPPER_VISIBILITY void
+WRAPPER_VISIBILITY (void)
 WRAPPER(epoxy_glEnd)(void)
 {
     epoxy_glEnd_unwrapped();
diff --git a/src/dispatch_common.h b/src/dispatch_common.h
index 6b8503a..f7117bb 100644
--- a/src/dispatch_common.h
+++ b/src/dispatch_common.h
@@ -77,11 +77,11 @@
 #endif
 
 #define UNWRAPPED_PROTO(x) (GLAPIENTRY *x)
-#define WRAPPER_VISIBILITY static GLAPIENTRY
+#define WRAPPER_VISIBILITY(type) static type GLAPIENTRY
 #define WRAPPER(x) x ## _wrapped
 
 #define GEN_GLOBAL_REWRITE_PTR(name, args, passthrough)          \
-    static EPOXY_CALLSPEC void                                        \
+    static void EPOXY_CALLSPEC                                        \
     name##_global_rewrite_ptr args                               \
     {                                                            \
         name = (void *)name##_resolver();                        \
@@ -89,7 +89,7 @@
     }
 
 #define GEN_GLOBAL_REWRITE_PTR_RET(ret, name, args, passthrough) \
-    static EPOXY_CALLSPEC ret                                    \
+    static ret EPOXY_CALLSPEC                                    \
     name##_global_rewrite_ptr args                               \
     {                                                            \
         name = (void *)name##_resolver();                        \
@@ -98,7 +98,7 @@
 
 #if USING_DISPATCH_TABLE
 #define GEN_DISPATCH_TABLE_REWRITE_PTR(name, args, passthrough)            \
-    static EPOXY_CALLSPEC void                                             \
+    static void EPOXY_CALLSPEC                                             \
     name##_dispatch_table_rewrite_ptr args                                 \
     {                                                                      \
         struct dispatch_table *dispatch_table = get_dispatch_table();      \
@@ -108,7 +108,7 @@
     }
 
 #define GEN_DISPATCH_TABLE_REWRITE_PTR_RET(ret, name, args, passthrough)   \
-    static EPOXY_CALLSPEC ret                                              \
+    static ret EPOXY_CALLSPEC                                              \
     name##_dispatch_table_rewrite_ptr args                                 \
     {                                                                      \
         struct dispatch_table *dispatch_table = get_dispatch_table();      \
@@ -118,14 +118,14 @@
     }
 
 #define GEN_DISPATCH_TABLE_THUNK(name, args, passthrough)                  \
-    static EPOXY_CALLSPEC void                                             \
+    static void EPOXY_CALLSPEC                                             \
     name##_dispatch_table_thunk args                                       \
     {                                                                      \
         get_dispatch_table()->name passthrough;                            \
     }
 
 #define GEN_DISPATCH_TABLE_THUNK_RET(ret, name, args, passthrough)         \
-    static EPOXY_CALLSPEC ret                                              \
+    static ret EPOXY_CALLSPEC                                              \
     name##_dispatch_table_thunk args                                       \
     {                                                                      \
         return get_dispatch_table()->name passthrough;                     \
@@ -148,48 +148,48 @@
     GEN_DISPATCH_TABLE_REWRITE_PTR_RET(ret, name, args, passthrough) \
     GEN_DISPATCH_TABLE_THUNK_RET(ret, name, args, passthrough)
 
-void *epoxy_egl_dlsym(const char *name);
-void *epoxy_glx_dlsym(const char *name);
-void *epoxy_gl_dlsym(const char *name);
-void *epoxy_gles1_dlsym(const char *name);
-void *epoxy_gles2_dlsym(const char *name);
-void *epoxy_gles3_dlsym(const char *name);
-void *epoxy_get_proc_address(const char *name);
-void *epoxy_get_core_proc_address(const char *name, int core_version);
-void *epoxy_get_bootstrap_proc_address(const char *name);
-
-int epoxy_conservative_gl_version(void);
-bool epoxy_conservative_has_gl_extension(const char *name);
-int epoxy_conservative_glx_version(void);
-bool epoxy_conservative_has_glx_extension(const char *name);
-int epoxy_conservative_egl_version(void);
-bool epoxy_conservative_has_egl_extension(const char *name);
-bool epoxy_conservative_has_wgl_extension(const char *name);
-void epoxy_print_failure_reasons(const char *name,
-                                 const char **provider_names,
-                                 const int *providers);
-
-bool epoxy_extension_in_string(const char *extension_list, const char *ext);
+PUBLIC void *epoxy_egl_dlsym(const char *name);
+PUBLIC void *epoxy_glx_dlsym(const char *name);
+PUBLIC void *epoxy_gl_dlsym(const char *name);
+PUBLIC void *epoxy_gles1_dlsym(const char *name);
+PUBLIC void *epoxy_gles2_dlsym(const char *name);
+PUBLIC void *epoxy_gles3_dlsym(const char *name);
+PUBLIC void *epoxy_get_proc_address(const char *name);
+PUBLIC void *epoxy_get_core_proc_address(const char *name, int core_version);
+PUBLIC void *epoxy_get_bootstrap_proc_address(const char *name);
+
+PUBLIC int epoxy_conservative_gl_version(void);
+PUBLIC bool epoxy_conservative_has_gl_extension(const char *name);
+PUBLIC int epoxy_conservative_glx_version(void);
+PUBLIC bool epoxy_conservative_has_glx_extension(const char *name);
+PUBLIC int epoxy_conservative_egl_version(void);
+PUBLIC bool epoxy_conservative_has_egl_extension(const char *name);
+PUBLIC bool epoxy_conservative_has_wgl_extension(const char *name);
+PUBLIC void epoxy_print_failure_reasons(const char *name,
+                                        const char **provider_names,
+                                        const int *providers);
+
+PUBLIC bool epoxy_extension_in_string(const char *extension_list, const char *ext);
 
 #define glBegin_unwrapped epoxy_glBegin_unwrapped
 #define glEnd_unwrapped epoxy_glEnd_unwrapped
-extern void UNWRAPPED_PROTO(glBegin_unwrapped)(GLenum primtype);
-extern void UNWRAPPED_PROTO(glEnd_unwrapped)(void);
+PUBLIC extern void UNWRAPPED_PROTO(glBegin_unwrapped)(GLenum primtype);
+PUBLIC extern void UNWRAPPED_PROTO(glEnd_unwrapped)(void);
 
 #if USING_DISPATCH_TABLE
-void gl_init_dispatch_table(void);
-void gl_switch_to_dispatch_table(void);
-void wgl_init_dispatch_table(void);
-void wgl_switch_to_dispatch_table(void);
-extern uint32_t gl_tls_index, gl_tls_size;
-extern uint32_t wgl_tls_index, wgl_tls_size;
+PUBLIC void gl_init_dispatch_table(void);
+PUBLIC void gl_switch_to_dispatch_table(void);
+PUBLIC void wgl_init_dispatch_table(void);
+PUBLIC void wgl_switch_to_dispatch_table(void);
+EPOXY_IMPORTEXPORT extern uint32_t gl_tls_index, gl_tls_size;
+EPOXY_IMPORTEXPORT extern uint32_t wgl_tls_index, wgl_tls_size;
 
 #define wglMakeCurrent_unwrapped epoxy_wglMakeCurrent_unwrapped
 #define wglMakeContextCurrentARB_unwrapped epoxy_wglMakeContextCurrentARB_unwrapped
 #define wglMakeContextCurrentEXT_unwrapped epoxy_wglMakeContextCurrentEXT_unwrapped
 #define wglMakeAssociatedContextCurrentAMD_unwrapped epoxy_wglMakeAssociatedContextCurrentAMD_unwrapped
-extern BOOL UNWRAPPED_PROTO(wglMakeCurrent_unwrapped)(HDC hdc, HGLRC hglrc);
-extern BOOL UNWRAPPED_PROTO(wglMakeContextCurrentARB_unwrapped)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
-extern BOOL UNWRAPPED_PROTO(wglMakeContextCurrentEXT_unwrapped)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
-extern BOOL UNWRAPPED_PROTO(wglMakeAssociatedContextCurrentAMD_unwrapped)(HGLRC hglrc);
+PUBLIC extern BOOL UNWRAPPED_PROTO(wglMakeCurrent_unwrapped)(HDC hdc, HGLRC hglrc);
+PUBLIC extern BOOL UNWRAPPED_PROTO(wglMakeContextCurrentARB_unwrapped)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
+PUBLIC extern BOOL UNWRAPPED_PROTO(wglMakeContextCurrentEXT_unwrapped)(HDC hDrawDC, HDC hReadDC, HGLRC hglrc);
+PUBLIC extern BOOL UNWRAPPED_PROTO(wglMakeAssociatedContextCurrentAMD_unwrapped)(HGLRC hglrc);
 #endif /* _WIN32_ */
diff --git a/src/dispatch_wgl.c b/src/dispatch_wgl.c
index 2bc5fc1..bfe9bb1 100644
--- a/src/dispatch_wgl.c
+++ b/src/dispatch_wgl.c
@@ -141,7 +141,7 @@ DllMain(HINSTANCE dll, DWORD reason, LPVOID reserved)
     return TRUE;
 }
 
-WRAPPER_VISIBILITY BOOL
+WRAPPER_VISIBILITY (BOOL)
 WRAPPER(epoxy_wglMakeCurrent)(HDC hdc, HGLRC hglrc)
 {
     BOOL ret = epoxy_wglMakeCurrent_unwrapped(hdc, hglrc);
@@ -152,7 +152,7 @@ WRAPPER(epoxy_wglMakeCurrent)(HDC hdc, HGLRC hglrc)
 }
 
 
-WRAPPER_VISIBILITY BOOL
+WRAPPER_VISIBILITY (BOOL)
 WRAPPER(epoxy_wglMakeContextCurrentARB)(HDC hDrawDC,
                                         HDC hReadDC,
                                         HGLRC hglrc)
@@ -166,7 +166,7 @@ WRAPPER(epoxy_wglMakeContextCurrentARB)(HDC hDrawDC,
 }
 
 
-WRAPPER_VISIBILITY BOOL
+WRAPPER_VISIBILITY (BOOL)
 WRAPPER(epoxy_wglMakeContextCurrentEXT)(HDC hDrawDC,
                                         HDC hReadDC,
                                         HGLRC hglrc)
@@ -180,7 +180,7 @@ WRAPPER(epoxy_wglMakeContextCurrentEXT)(HDC hDrawDC,
 }
 
 
-WRAPPER_VISIBILITY BOOL
+WRAPPER_VISIBILITY (BOOL)
 WRAPPER(epoxy_wglMakeAssociatedContextCurrentAMD)(HGLRC hglrc)
 {
     BOOL ret = epoxy_wglMakeAssociatedContextCurrentAMD_unwrapped(hglrc);
-- 
2.3.5.windows.8

